<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
     <div>
                <h3>Your Id: <span id="myId"></span></h3>
                <h3>Online Users (click to connect)</h3>
                <div id="users">

                </div>
                <video id="local-video"></video>
                <video id="remote-video"></video>
            </div>
            </div>
            <p id="status"></p>
        </div>

       <script src = "/socket.io/socket.io.js"></script>

        <script>
            const socket = io();
            let resgisteredUsers = []
            let yourId = ""
            socket.on("connect",()=>{
                yourId = socket.id
                const idField = document.querySelector("#myId")
               idField.innerText = yourId
            })
              

            //webRTC connection
            const peer = new RTCPeerConnection({
                iceServers: [
                    {
                        urls: "stun:stun.l.google.com:19302"
                    }
                ]
            })


            peer.onconnectionstatechange = () => {
                    console.log("Connection state changed to:", peer.connectionState);

                    if (peer.connectionState === "connected") {
                        console.log("Peer-to-peer connection established!");
                    }
              };
            

            const getUserMedia = async () => {
                  const localStream = await navigator.mediaDevices.getUserMedia({
                        video: true,
                        audio:true
                     });

                    const videoLocal = document.querySelector("#local-video");
                    videoLocal.srcObject = localStream;
                    videoLocal.play()



                for (const track of localStream.getTracks()){
                    peer.addTrack(track, localStream)
                }

                }

            getUserMedia()
           
            const createCall = async (to) =>{
                const status = document.querySelector("#status")
                status.innerText = `Calling ${to}`
             

                const localOffer = await peer.createOffer()

                await peer.setLocalDescription(new RTCSessionDescription(localOffer))
                socket.emit("outgoing:call", {fromOffer: localOffer, receiver: to })
            }


            peer.ontrack = async (event) =>{
                const status = document.querySelector("#status")
                status.innerText = "Incoming stream"

                const remoteVideo = document.querySelector("#remote-video")

                remoteVideo.srcObject = event.streams[0]
                let playPromise =  remoteVideo.play()

                  if (playPromise !== undefined) {
                        playPromise.then(_ => {
                        // Automatic playback started!
                        // Show playing UI.
                        })
                        .catch(error => {
                        // Auto-play was prevented
                        // Show paused UI.
                        });
                    }

         
            }
            
            socket.on("incoming-call",async (data)=>{
                const {caller, offer} = data
                await peer.setRemoteDescription(new RTCSessionDescription(offer))
                const answer = await peer.createAnswer()
                await peer.setLocalDescription(new RTCSessionDescription(answer))
                
                
                socket.emit("call-accepted", {answer: answer, to: caller})

            })  
            
            socket.on("incoming-answer", async (data) =>{
                const {from, offer} = data

                await peer.setRemoteDescription(new RTCSessionDescription(offer))
            })
        
              socket.on("user:joined",async (id) =>{
    
             
                 const userBox = document.querySelector("#users")
        
                const response = await fetch("/users",{method: "GET"})
                const users = await response.json()
           
                users.forEach(async (element) => {
                  
                    if (element[0]!= yourId && !(resgisteredUsers.includes(element[0]))){
                     const btn = document.createElement("button")
                     btn.innerText = element[0]
                     btn.setAttribute("onclick", `createCall('${element[0]}')`)
                     userBox.appendChild(btn)
                    resgisteredUsers.push(element[0])
                    }
              })
              })
        

             
        </script>
</body>
</html>